// tslint:disable
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BenefitModel
 */
export interface BenefitModel {
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    coverageType: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    carrierName?: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    benefitName?: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    groupNumber?: string;
    /**
     * 
     * @type {object}
     * @memberof BenefitModel
     */
    isUHC?: object;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    memberId?: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    networkId?: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    terminationDate?: string;
    /**
     * 
     * @type {number}
     * @memberof BenefitModel
     */
    lastUpdated: number;
    /**
     * 
     * @type {string}
     * @memberof BenefitModel
     */
    guestUrl?: string;
}
/**
 * 
 * @export
 * @interface CcfBenefitModel
 */
export interface CcfBenefitModel {
    /**
     * 
     * @type {string}
     * @memberof CcfBenefitModel
     */
    benefitId: string;
    /**
     * 
     * @type {string}
     * @memberof CcfBenefitModel
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Demographics
 */
export interface Demographics {
    /**
     * 
     * @type {string}
     * @memberof Demographics
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Demographics
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Demographics
     */
    dob: string;
}
/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    syllabusId: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    hydraId: string;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    enrolledDate?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Program
     */
    hasMilestones: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Program
     */
    isComplete: boolean;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    lastActivity?: number;
}
/**
 * 
 * @export
 * @interface UserBenefitsResponse
 */
export interface UserBenefitsResponse {
    /**
     * 
     * @type {Array<BenefitModel>}
     * @memberof UserBenefitsResponse
     */
    benefits: Array<BenefitModel>;
    /**
     * 
     * @type {Demographics}
     * @memberof UserBenefitsResponse
     */
    demographics?: Demographics;
}
/**
 * 
 * @export
 * @interface UserRegistrationRequest
 */
export interface UserRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    internalPlanId: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    dob?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    memberId?: string;
}

/**
 * BenefitApi - axios parameter creator
 * @export
 */
export const BenefitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBenefits(rallyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'rallyId' is not null or undefined
            if (rallyId === null || rallyId === undefined) {
                throw new RequiredError('rallyId','Required parameter rallyId was null or undefined when calling getAllBenefits.');
            }
            const localVarPath = `/benefitsPrograms/v1/benefits/{rallyId}`
                .replace(`{${"rallyId"}}`, encodeURIComponent(String(rallyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ccf benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcfenefits(rallyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'rallyId' is not null or undefined
            if (rallyId === null || rallyId === undefined) {
                throw new RequiredError('rallyId','Required parameter rallyId was null or undefined when calling getCcfenefits.');
            }
            const localVarPath = `/benefitsPrograms/v1/ccfBenefits/{rallyId}`
                .replace(`{${"rallyId"}}`, encodeURIComponent(String(rallyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register user for a medical plan
         * @param {string} rallyId 
         * @param {UserRegistrationRequest} body JSON body describing benefit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokePlanPickup(rallyId: string, body: UserRegistrationRequest, options: any = {}): RequestArgs {
            // verify required parameter 'rallyId' is not null or undefined
            if (rallyId === null || rallyId === undefined) {
                throw new RequiredError('rallyId','Required parameter rallyId was null or undefined when calling invokePlanPickup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling invokePlanPickup.');
            }
            const localVarPath = `/benefitsPrograms/v1/benefits/{rallyId}`
                .replace(`{${"rallyId"}}`, encodeURIComponent(String(rallyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BenefitApi - functional programming interface
 * @export
 */
export const BenefitApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBenefits(rallyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBenefitsResponse> {
            const localVarAxiosArgs = BenefitApiAxiosParamCreator(configuration).getAllBenefits(rallyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get ccf benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcfenefits(rallyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CcfBenefitModel>> {
            const localVarAxiosArgs = BenefitApiAxiosParamCreator(configuration).getCcfenefits(rallyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register user for a medical plan
         * @param {string} rallyId 
         * @param {UserRegistrationRequest} body JSON body describing benefit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokePlanPickup(rallyId: string, body: UserRegistrationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = BenefitApiAxiosParamCreator(configuration).invokePlanPickup(rallyId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BenefitApi - factory interface
 * @export
 */
export const BenefitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBenefits(rallyId: string, options?: any): AxiosPromise<UserBenefitsResponse> {
            return BenefitApiFp(configuration).getAllBenefits(rallyId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get ccf benefits for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcfenefits(rallyId: string, options?: any): AxiosPromise<Array<CcfBenefitModel>> {
            return BenefitApiFp(configuration).getCcfenefits(rallyId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register user for a medical plan
         * @param {string} rallyId 
         * @param {UserRegistrationRequest} body JSON body describing benefit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokePlanPickup(rallyId: string, body: UserRegistrationRequest, options?: any): AxiosPromise<object> {
            return BenefitApiFp(configuration).invokePlanPickup(rallyId, body, options)(axios, basePath);
        },
    };
};

/**
 * BenefitApi - interface
 * @export
 * @interface BenefitApi
 */
export interface BenefitApiInterface {
    /**
     * 
     * @summary Get all benefits for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApiInterface
     */
    getAllBenefits(rallyId: string, options?: any): AxiosPromise<UserBenefitsResponse>;

    /**
     * 
     * @summary Get ccf benefits for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApiInterface
     */
    getCcfenefits(rallyId: string, options?: any): AxiosPromise<Array<CcfBenefitModel>>;

    /**
     * 
     * @summary Register user for a medical plan
     * @param {string} rallyId 
     * @param {UserRegistrationRequest} body JSON body describing benefit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApiInterface
     */
    invokePlanPickup(rallyId: string, body: UserRegistrationRequest, options?: any): AxiosPromise<object>;

}

/**
 * BenefitApi - object-oriented interface
 * @export
 * @class BenefitApi
 * @extends {BaseAPI}
 */
export class BenefitApi extends BaseAPI implements BenefitApiInterface {
    /**
     * 
     * @summary Get all benefits for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApi
     */
    public getAllBenefits(rallyId: string, options?: any) {
        return BenefitApiFp(this.configuration).getAllBenefits(rallyId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get ccf benefits for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApi
     */
    public getCcfenefits(rallyId: string, options?: any) {
        return BenefitApiFp(this.configuration).getCcfenefits(rallyId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register user for a medical plan
     * @param {string} rallyId 
     * @param {UserRegistrationRequest} body JSON body describing benefit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitApi
     */
    public invokePlanPickup(rallyId: string, body: UserRegistrationRequest, options?: any) {
        return BenefitApiFp(this.configuration).invokePlanPickup(rallyId, body, options)(this.axios, this.basePath);
    }

}


/**
 * ProgramApi - axios parameter creator
 * @export
 */
export const ProgramApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all programs for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrograms(rallyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'rallyId' is not null or undefined
            if (rallyId === null || rallyId === undefined) {
                throw new RequiredError('rallyId','Required parameter rallyId was null or undefined when calling getAllPrograms.');
            }
            const localVarPath = `/benefitsPrograms/v1/programs/{rallyId}`
                .replace(`{${"rallyId"}}`, encodeURIComponent(String(rallyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramApi - functional programming interface
 * @export
 */
export const ProgramApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all programs for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrograms(rallyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Program>> {
            const localVarAxiosArgs = ProgramApiAxiosParamCreator(configuration).getAllPrograms(rallyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProgramApi - factory interface
 * @export
 */
export const ProgramApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all programs for a user
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrograms(rallyId: string, options?: any): AxiosPromise<Array<Program>> {
            return ProgramApiFp(configuration).getAllPrograms(rallyId, options)(axios, basePath);
        },
    };
};

/**
 * ProgramApi - interface
 * @export
 * @interface ProgramApi
 */
export interface ProgramApiInterface {
    /**
     * 
     * @summary Get all programs for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramApiInterface
     */
    getAllPrograms(rallyId: string, options?: any): AxiosPromise<Array<Program>>;

}

/**
 * ProgramApi - object-oriented interface
 * @export
 * @class ProgramApi
 * @extends {BaseAPI}
 */
export class ProgramApi extends BaseAPI implements ProgramApiInterface {
    /**
     * 
     * @summary Get all programs for a user
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramApi
     */
    public getAllPrograms(rallyId: string, options?: any) {
        return ProgramApiFp(this.configuration).getAllPrograms(rallyId, options)(this.axios, this.basePath);
    }

}


